package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"

	"github.com/newlix/rpc/generators/sqlc"
	"github.com/newlix/rpc/schema"
)

func main() {
	path := flag.String("schema", "schema.json", "Path to the schema.json")
	pkg := flag.String("package", "model", "Name of the package")
	schemaSQL := flag.String("schema-sql", "sql/schema/schema.sql", "Path to the schema.sql")
	query := flag.String("query", "model/query.apex.go", "Path to the basic crud query")
	flag.Parse()

	s, err := schema.Load(*path)
	if err != nil {
		log.Fatalf("error: %s", err)
	}

	if err := os.MkdirAll(filepath.Dir(*schemaSQL), os.ModePerm); err != nil {
		log.Fatal(err)
	}
	if f, err := os.Create(*schemaSQL); err != nil {
		log.Fatal(err)
	} else {
		if err := generateSQLCSchema(f, s); err != nil {
			log.Fatal(err)
		}
	}

	if err := os.MkdirAll(filepath.Dir(*query), os.ModePerm); err != nil {
		log.Fatal(err)
	}

	if f, err := os.Create(*query); err != nil {
		log.Fatal(err)
	} else {
		if err := generateCRUDQuery(f, s, *pkg); err != nil {
			log.Fatal(err)
		}
	}

	if f, err := os.Create("tmp/migrate.go"); err != nil {
		log.Fatal(err)
	} else {
		if err := sqlc.GenerateMigrate(f, s); err != nil {
			log.Fatal(err)
		}
	}

}

// generate implementation.
func generateSQLCSchema(w io.Writer, s *schema.Schema) error {
	out := fmt.Fprintf

	out(w, "-- Do not edit, this file was generated by github.com/newlix/rpc/cmd/rpc-sqlc.\n\n")

	err := sqlc.GenerateSchema(w, s)
	if err != nil {
		return fmt.Errorf("generating sqlc schema: %w", err)
	}

	return nil
}

func generateCRUDQuery(w io.Writer, s *schema.Schema, pkg string) error {
	out := fmt.Fprintf

	out(w, "// Do not edit, this file was generated by github.com/newlix/rpc.\n\n")
	out(w, "package %s\n\n", pkg)

	out(w, "import (\n")
	out(w, "  \"context\"\n")
	out(w, ")\n\n")

	err := sqlc.GenerateQuery(w, s)
	if err != nil {
		return fmt.Errorf("generating sqlc query: %w", err)
	}

	return nil
}
